import { useContext, useEffect, useRef, useState } from "react";

import x from "./Sound";
const {change, toggleMute, get, getMuted, play} = x;

import {clear, draw } from "./process_draws.ts"
import { add_drawings, animation, update_all, update_and_draw } from "./animations.ts"; 
import { drawCircle, normalize, moveTo } from "./canvasDrawing.ts";
import { events, set_events } from "./EventManager.tsx";

class anim implements animation{
    x : number;
    constructor(x : number){
        this.x = x;
    }
    update(){
        this.x++;
        return false
    }
    draw(){
        return [{type:"drawLine", "x0" : this.x, "x1" : 100+this.x, "y0" : 100, "y1" :200, "color" : "red", "width" : 10}] as draw_command[]; 
    }
}

class animCircle implements animation{
    x : number;
    y : number;
    tx : number;
    ty : number;
    constructor(x : number, y : number){
        this.x = x;
        this.y = y;
        this.tx = 0;
        this.ty = 0;
    }
    set_target(tx : number,ty : number){
        this.tx = tx;
        this.ty = ty;
    }
    update(){
        [this.x, this.y] = moveTo([this.x, this.y], [this.tx, this.ty], 10)
        return false
    }
    draw(){
        return [{type:"drawCircle", "r" : 3, "x" : this.x, "y":this.y,  "fill":true,"color" : "red"}] as draw_command[]; 
    }
}



var anim_lst : anim[] = [];
anim_lst.push(new anim(0));   
anim_lst.push(new anim(100));   
var circle = new animCircle(0,0);

var run_fn : number = 0;
function Game({back_fn} : any){

    const [animInt, setAnimInt] = useState<number>(0);
    const cRef = useRef<HTMLCanvasElement>(null);
    const cRef2 = useRef<HTMLCanvasElement>(null);
    const [added, setAdded] = useState<boolean>(false);
    if(added == false){
        // register event and move to it.
        events["mousemove_t"] = [function(e : MouseEvent, lst : [animCircle, React.RefObject<HTMLCanvasElement>]){
            var [item, ref] = lst;
            if(e.target == ref.current){ 
                item.set_target(e.offsetX, e.offsetY); 
            }
        }, [circle, cRef2]]
        set_events(); 
        setAdded(true);
    }
    useEffect(() => { 
        //componentDidMount
        run_fn = setInterval(function(){
            clear(cRef2); 
            update_and_draw([circle], cRef2); 
        }, 50)
        //componentWillUnmount
        return () => {
            clearInterval(run_fn);
    }}, [])
    return         <>
        <button onClick={() =>{toggleMute()}}> Mute</button>
        <button onClick={() => {if(get() == "a.ogg"){ change("b.ogg")} else {change("a.ogg")}}}> Change</button>
        <button onClick={()=> play("c.ogg")}> Play</button>
        <button onClick={() => {setAnimInt(setInterval(() => update_and_draw(anim_lst, cRef), 50))}}> Tick</button>
        <button onClick={() => clearInterval(animInt)}>Stop</button>        
        <button onClick={() => {clear(cRef)}}> Clear</button>
        <canvas ref={cRef}> </canvas><br />
        <button onClick={() => back_fn(true)}> Pause</button>
        <canvas ref={cRef}> </canvas><br />
        <canvas width={600} height={600} style={{"border":"1px solid black"}} ref={cRef2}></canvas>
        </>
}

export default Game;
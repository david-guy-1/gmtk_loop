// Generated by ts-to-zod
import { z } from "zod";

export const fillLinearSchema = z.object({
  type: z.literal("fill_linear"),
  x0: z.number(),
  y0: z.number(),
  x1: z.number(),
  y1: z.number(),
  colorstops: z.array(z.tuple([z.number(), z.string()])),
});

export const fillRadialSchema = z.object({
  type: z.literal("fill_radial"),
  x0: z.number(),
  y0: z.number(),
  x1: z.number(),
  y1: z.number(),
  r0: z.number(),
  r1: z.number(),
  colorstops: z.array(z.tuple([z.number(), z.string()])),
});

export const fillConicSchema = z.object({
  type: z.literal("fill_conic"),
  x: z.number(),
  y: z.number(),
  theta: z.number(),
  colorstops: z.array(z.tuple([z.number(), z.string()])),
});

export const fillstyleSchema = z.union([
  z.string(),
  fillLinearSchema,
  fillRadialSchema,
  fillConicSchema,
]);

export const bezierSchema = z.tuple([
  z.number(),
  z.number(),
  z.number(),
  z.number(),
  z.number(),
  z.number(),
]);

export const drawImageCommandSchema = z.object({
  type: z.literal("drawImage"),
  img: z.string(),
  x: z.number(),
  y: z.number(),
});

export const drawLineCommandSchema = z.object({
  type: z.literal("drawLine"),
  x0: z.number(),
  y0: z.number(),
  x1: z.number(),
  y1: z.number(),
  color: z.string().optional(),
  width: z.number().optional(),
});

export const drawCircleCommandSchema = z.object({
  type: z.literal("drawCircle"),
  x: z.number(),
  y: z.number(),
  r: z.number(),
  color: fillstyleSchema.optional(),
  width: z.number().optional(),
  fill: z.boolean().optional(),
  transparency: z.number().optional(),
  start: z.number().optional(),
  end: z.number().optional(),
});

export const drawPolygonCommandSchema = z.object({
  type: z.literal("drawPolygon"),
  points_x: z.array(z.number()),
  points_y: z.array(z.number()),
  color: fillstyleSchema.optional(),
  width: z.number().optional(),
  fill: z.boolean().optional(),
  transparency: z.number().optional(),
});

export const drawRectangleCommandSchema = z.object({
  type: z.literal("drawRectangle"),
  tlx: z.number(),
  tly: z.number(),
  brx: z.number(),
  bry: z.number(),
  color: fillstyleSchema.optional(),
  width: z.number().optional(),
  fill: z.boolean().optional(),
  transparency: z.number().optional(),
});

export const drawRectangle2CommandSchema = z.object({
  type: z.literal("drawRectangle2"),
  tlx: z.number(),
  tly: z.number(),
  width: z.number(),
  height: z.number(),
  color: fillstyleSchema.optional(),
  widthA: z.number().optional(),
  fill: z.boolean().optional(),
  transparency: z.number().optional(),
});

export const drawTextCommandSchema = z.object({
  type: z.literal("drawText"),
  text_: z.string(),
  x: z.number(),
  y: z.number(),
  width: z.union([z.number(), z.undefined()]).optional(),
  color: z.string().optional(),
  size: z.number().optional(),
  font: z.string().optional(),
});

export const drawEllipseCommandSchema = z.object({
  type: z.literal("drawEllipse"),
  posx: z.number(),
  posy: z.number(),
  brx: z.number(),
  bry: z.number(),
  color: fillstyleSchema.optional(),
  transparency: z.number().optional(),
  rotate: z.number().optional(),
  start: z.number().optional(),
  end: z.number().optional(),
});

export const drawEllipseCRCommandSchema = z.object({
  type: z.literal("drawEllipseCR"),
  cx: z.number(),
  cy: z.number(),
  rx: z.number(),
  ry: z.number(),
  color: fillstyleSchema.optional(),
  transparency: z.number().optional(),
  rotate: z.number().optional(),
  start: z.number().optional(),
  end: z.number().optional(),
});

export const drawEllipse2CommandSchema = z.object({
  type: z.literal("drawEllipse2"),
  posx: z.number(),
  posy: z.number(),
  width: z.number(),
  height: z.number(),
  color: fillstyleSchema.optional(),
  transparency: z.number().optional(),
  rotate: z.number().optional(),
  start: z.number().optional(),
  end: z.number().optional(),
});

export const drawBezierCurveCommandSchema = z.object({
  type: z.literal("drawBezierCurve"),
  x: z.number(),
  y: z.number(),
  p1x: z.number(),
  p1y: z.number(),
  p2x: z.number(),
  p2y: z.number(),
  p3x: z.number(),
  p3y: z.number(),
  color: fillstyleSchema.optional(),
  width: z.number().optional(),
});

export const drawBezierShapeCommandSchema = z.object({
  type: z.literal("drawBezierShape"),
  x: z.number(),
  y: z.number(),
  curves: z.array(bezierSchema),
  color: fillstyleSchema.optional(),
  width: z.number().optional(),
});

export const drawRoundedRectangleCommandSchema = z.object({
  type: z.literal("drawRoundedRectangle"),
  x0: z.number(),
  y0: z.number(),
  x1: z.number(),
  y1: z.number(),
  r1: z.number(),
  r2: z.number(),
  color: fillstyleSchema.optional(),
  width: z.number().optional(),
  fill: z.boolean().optional(),
});

export const drawCommandSchema = z.union([
  drawImageCommandSchema,
  drawLineCommandSchema,
  drawCircleCommandSchema,
  drawPolygonCommandSchema,
  drawRectangleCommandSchema,
  drawRectangle2CommandSchema,
  drawTextCommandSchema,
  drawEllipseCommandSchema,
  drawEllipseCRCommandSchema,
  drawEllipse2CommandSchema,
  drawBezierCurveCommandSchema,
  drawBezierShapeCommandSchema,
  drawRoundedRectangleCommandSchema,
]);

export const pointSchema = z.tuple([z.number(), z.number()]);

export const point3dSchema = z.tuple([z.number(), z.number(), z.number()]);

export const rectSchema = z.tuple([
  z.number(),
  z.number(),
  z.number(),
  z.number(),
]);

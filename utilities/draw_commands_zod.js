// Generated by ts-to-zod


 const fillLinearSchema = window.z.object({
  type: window.z.literal("fill_linear"),
  x0: window.z.number(),
  y0: window.z.number(),
  x1: window.z.number(),
  y1: window.z.number(),
  colorstops: window.z.array(window.z.tuple([window.z.number(), window.z.string()])),
});

 const fillRadialSchema = window.z.object({
  type: window.z.literal("fill_radial"),
  x0: window.z.number(),
  y0: window.z.number(),
  x1: window.z.number(),
  y1: window.z.number(),
  r0: window.z.number(),
  r1: window.z.number(),
  colorstops: window.z.array(window.z.tuple([window.z.number(), window.z.string()])),
});

 const fillConicSchema = window.z.object({
  type: window.z.literal("fill_conic"),
  x: window.z.number(),
  y: window.z.number(),
  theta: window.z.number(),
  colorstops: window.z.array(window.z.tuple([window.z.number(), window.z.string()])),
});

 const bezierSchema = window.z.tuple([
  window.z.number(),
  window.z.number(),
  window.z.number(),
  window.z.number(),
  window.z.number(),
  window.z.number(),
]);

 const drawImageCommandSchema = window.z.object({
  type: window.z.literal("drawImage"),
  img: window.z.string(),
  x: window.z.number(),
  y: window.z.number(),
});

 const drawLineCommandSchema = window.z.object({
  type: window.z.literal("drawLine"),
  x0: window.z.number(),
  y0: window.z.number(),
  x1: window.z.number(),
  y1: window.z.number(),
  color: window.z.string().optional(),
  width: window.z.number().optional(),
});

 const drawTextCommandSchema = window.z.object({
  type: window.z.literal("drawText"),
  text_: window.z.string(),
  x: window.z.number(),
  y: window.z.number(),
  width: window.z.union([window.z.number(), window.z.undefined()]).optional(),
  color: window.z.string().optional(),
  size: window.z.number().optional(),
  font: window.z.string().optional(),
});

const pointSchema = window.z.tuple([window.z.number(), window.z.number()]);

const rectSchema = window.z.tuple([window.z.number(), window.z.number(), window.z.number(), window.z.number()]);

const namedPointSchema = window.z.tuple([window.z.string(), window.z.number(), window.z.number()]);

const pointFillLinearSchema = window.z.object({
  type: window.z.literal("fill_linear"),
  p0: window.z.string(),
  p1: window.z.string(),
  colorstops: window.z.array(window.z.tuple([window.z.number(), window.z.string()])),
});

const pointFillRadialSchema = window.z.object({
  type: window.z.literal("fill_radial"),
  p0: window.z.string(),
  p1: window.z.string(),
  r0: window.z.number(),
  r1: window.z.number(),
  colorstops: window.z.array(window.z.tuple([window.z.number(), window.z.string()])),
});

const pointFillConicSchema = window.z.object({
  type: window.z.literal("fill_conic"),
  p0: window.z.string(),
  theta: window.z.number(),
  colorstops: window.z.array(window.z.tuple([window.z.number(), window.z.string()])),
});

const pointFillSchema = window.z.union([
  window.z.string(),
  pointFillLinearSchema,
  pointFillRadialSchema,
  pointFillConicSchema,
]);

const outlineSchema = window.z.object({
  thickness: window.z.number(),
  color: window.z.string(),
});

const shapeTypesSchema = window.z.union([
  window.z.literal("line"),
  window.z.literal("bezier"),
  window.z.literal("smooth bezier"),
  window.z.literal("polygon"),
  window.z.literal("circle"),
  window.z.literal("bezier shape"),
  window.z.literal("smooth bezier shape"),
]);

const shapeSchema = window.z.object({
  parent_layer: window.z.string(),
  points: window.z.array(window.z.tuple([window.z.string(), window.z.number(), window.z.number()])),
  name: window.z.string(),
  type: shapeTypesSchema,
  fill: window.z.union([window.z.string(), pointFillSchema]).optional(),
  outline: outlineSchema.optional(),
  visible: window.z.boolean(),
  outline_visible: window.z.boolean(),
});

const layerSchema = window.z.object({
  name: window.z.string(),
  shapes: window.z.array(shapeSchema),
});

const fillstyleSchema = window.z.any();

const drawCircleCommandSchema = window.z.any();

const drawPolygonCommandSchema = window.z.any();

const drawBezierCurveCommandSchema = window.z.any();

const drawBezierShapeCommandSchema = window.z.any();

const drawCommandSchema = window.z.any();

const point3dSchema = window.z.any();

 const drawRectangleCommandSchema = window.z.object({
  type: window.z.literal("drawRectangle"),
  tlx: window.z.number(),
  tly: window.z.number(),
  brx: window.z.number(),
  bry: window.z.number(),
  color: fillstyleSchema.optional(),
  width: window.z.number().optional(),
  fill: window.z.boolean().optional(),
  transparency: window.z.number().optional(),
});

 const drawRectangle2CommandSchema = window.z.object({
  type: window.z.literal("drawRectangle2"),
  tlx: window.z.number(),
  tly: window.z.number(),
  width: window.z.number(),
  height: window.z.number(),
  color: fillstyleSchema.optional(),
  widthA: window.z.number().optional(),
  fill: window.z.boolean().optional(),
  transparency: window.z.number().optional(),
});

 const drawEllipseCommandSchema = window.z.object({
  type: window.z.literal("drawEllipse"),
  posx: window.z.number(),
  posy: window.z.number(),
  brx: window.z.number(),
  bry: window.z.number(),
  color: fillstyleSchema.optional(),
  transparency: window.z.number().optional(),
  rotate: window.z.number().optional(),
  start: window.z.number().optional(),
  end: window.z.number().optional(),
});

 const drawEllipseCRCommandSchema = window.z.object({
  type: window.z.literal("drawEllipseCR"),
  cx: window.z.number(),
  cy: window.z.number(),
  rx: window.z.number(),
  ry: window.z.number(),
  color: fillstyleSchema.optional(),
  transparency: window.z.number().optional(),
  rotate: window.z.number().optional(),
  start: window.z.number().optional(),
  end: window.z.number().optional(),
});

 const drawEllipse2CommandSchema = window.z.object({
  type: window.z.literal("drawEllipse2"),
  posx: window.z.number(),
  posy: window.z.number(),
  width: window.z.number(),
  height: window.z.number(),
  color: fillstyleSchema.optional(),
  transparency: window.z.number().optional(),
  rotate: window.z.number().optional(),
  start: window.z.number().optional(),
  end: window.z.number().optional(),
});

 const drawRoundedRectangleCommandSchema = window.z.object({
  type: window.z.literal("drawRoundedRectangle"),
  x0: window.z.number(),
  y0: window.z.number(),
  x1: window.z.number(),
  y1: window.z.number(),
  r1: window.z.number(),
  r2: window.z.number(),
  color: fillstyleSchema.optional(),
  width: window.z.number().optional(),
  fill: window.z.boolean().optional(),
});

const displayTotalSchema = window.z.object({
  points: window.z.array(namedPointSchema),
  layers: window.z.array(layerSchema),
  zoom: point3dSchema,
  layer_visibility: window.z.record(window.z.boolean()),
  show_points: window.z.union([
    window.z.literal("none"),
    window.z.literal("shape"),
    window.z.literal("layer"),
    window.z.literal("all"),
  ]),
  show_labels: window.z.boolean(),
  selected_point: window.z.string().optional(),
  selected_shape: window.z.string().optional(),
  selected_layer: window.z.string(),
  total_points: window.z.number(),
  total_shapes: window.z.number(),
  message: window.z.string(),
});

const matrix3Schema = window.z.tuple([point3dSchema, point3dSchema, point3dSchema]);
